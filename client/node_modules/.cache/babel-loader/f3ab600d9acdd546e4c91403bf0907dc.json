{"ast":null,"code":"var _jsxFileName = \"/home/nick/Documents/projects/golf-store/client/src/checkout/stripe/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { useFetch } from \"../../hooks/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardStyle = {\n  style: {\n    base: {\n      fontSize: \"16px\",\n      color: \"#424770\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#9e2146\"\n    }\n  }\n};\nconst products = \"https://golf-company.herokuapp.com/api/golfs/\";\n\nconst CheckoutForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const {\n    data,\n    loading,\n    error\n  } = useFetch(products);\n  useEffect(() => {\n    if (loading || error) return;\n    const {\n      price\n    } = data[0]; // fetch stripe client secret using to proccess payment\n\n    window.fetch(\"/api/payments/stripe\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          price,\n          amount: 3\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, [data, loading, error]);\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // return if stripe has not been loaded yet\n\n    console.log(stripe);\n    console.log(elements);\n\n    if (!stripe || elements) {\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement); // Complete payment\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod(clientSecret, {\n      type: \"card\",\n      card: cardElement\n    });\n    console.log(error);\n    console.log(paymentMethod);\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"stripe-checkout-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"09EtG62XHgFUid6FHBR4mRznvzA=\", false, function () {\n  return [useStripe, useElements, useFetch];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/nick/Documents/projects/golf-store/client/src/checkout/stripe/CheckoutForm.js"],"names":["React","useEffect","useState","CardElement","useElements","useStripe","useFetch","cardStyle","style","base","fontSize","color","invalid","products","CheckoutForm","stripe","elements","clientSecret","setClientSecret","data","loading","error","price","window","fetch","method","headers","body","JSON","stringify","items","amount","then","res","json","handleSubmit","e","preventDefault","console","log","cardElement","getElement","paymentMethod","createPaymentMethod","type","card"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { useFetch } from \"../../hooks/useFetch\";\n\nconst cardStyle = {\n  style: {\n    base: {\n      fontSize: \"16px\",\n      color: \"#424770\",\n      \"::placeholder\": {\n        color: \"#aab7c4\",\n      },\n    },\n    invalid: {\n      color: \"#9e2146\",\n    },\n  },\n};\n\nconst products = \"https://golf-company.herokuapp.com/api/golfs/\";\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const { data, loading, error } = useFetch(products);\n\n  useEffect(() => {\n    if (loading || error) return;\n    const { price } = data[0];\n    // fetch stripe client secret using to proccess payment\n    window\n      .fetch(\"/api/payments/stripe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ items: [{ price, amount: 3 }] }),\n      })\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      });\n  }, [data, loading, error]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // return if stripe has not been loaded yet\n    console.log(stripe);\n    console.log(elements);\n    if (!stripe || elements) {\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement);\n\n    // Complete payment\n    const { error, paymentMethod } = await stripe.createPaymentMethod(\n      clientSecret,\n      {\n        type: \"card\",\n        card: cardElement,\n      }\n    );\n    console.log(error);\n    console.log(paymentMethod);\n\n    if (error) {\n      console.log(\"[error]\", error);\n    } else {\n      console.log(\"[PaymentMethod]\", paymentMethod);\n    }\n  };\n\n  return (\n    <form id={\"stripe-checkout-form\"} onSubmit={handleSubmit}>\n      <CardElement id=\"card-element\" options={cardStyle}></CardElement>\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}