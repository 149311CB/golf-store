{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport const useFetch = url => {\n  _s();\n\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    // set loading to true\n    setState(state => ({ ...state,\n      loading: true\n    })); //fetching data\n\n    fetch(url).then(response => response.json()).then(data => setState({\n      data: data,\n      loading: false\n    })).catch(error => {\n      setState(state => ({ ...state,\n        error: error\n      }));\n    });\n  }, [url, setState]);\n  return state;\n};\n\n_s(useFetch, \"gAeSYv5hJXRA6CDxxoYc2vFjTMA=\");","map":{"version":3,"sources":["/home/nick/Documents/projects/golf-store/client/src/hooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","state","setState","data","loading","error","fetch","then","response","json","catch"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AACjCK,IAAAA,IAAI,EAAE,IAD2B;AAEjCC,IAAAA,OAAO,EAAE,IAFwB;AAGjCC,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd;AACAK,IAAAA,QAAQ,CAAED,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAYG,MAAAA,OAAO,EAAE;AAArB,KAAZ,CAAD,CAAR,CAFc,CAGd;;AACAE,IAAAA,KAAK,CAACN,GAAD,CAAL,CACGO,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESJ,IAAD,IAAUD,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAAD,CAF1B,EAGGM,KAHH,CAGUL,KAAD,IAAW;AAChBH,MAAAA,QAAQ,CAAED,KAAD,KAAY,EAAE,GAAGA,KAAL;AAAYI,QAAAA,KAAK,EAAEA;AAAnB,OAAZ,CAAD,CAAR;AACD,KALH;AAMD,GAVQ,EAUN,CAACL,GAAD,EAAME,QAAN,CAVM,CAAT;AAWA,SAAOD,KAAP;AACD,CAlBM;;GAAMF,Q","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport const useFetch = (url) => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null,\n  });\n  useEffect(() => {\n    // set loading to true\n    setState((state) => ({ ...state, loading: true }));\n    //fetching data\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setState({ data: data, loading: false }))\n      .catch((error) => {\n        setState((state) => ({ ...state, error: error }));\n      });\n  }, [url, setState]);\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}