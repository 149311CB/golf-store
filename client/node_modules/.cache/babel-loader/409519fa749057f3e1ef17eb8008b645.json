{"ast":null,"code":"var _jsxFileName = \"/home/nick/Documents/projects/golf-store/client/src/checkout/stripe/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { useFetch } from \"../../hooks/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardStyle = {\n  style: {\n    base: {\n      fontSize: \"16px\",\n      color: \"#424770\",\n      \"::placeholder\": {\n        color: \"#aab7c4\"\n      }\n    },\n    invalid: {\n      color: \"#9e2146\"\n    }\n  }\n};\nconst products = \"https://golf-company.herokuapp.com/api/golfs/\";\n\nconst CheckoutForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [clientSecret, setClientSecret] = useState(\"\"); // TODO: These can be use globally\n\n  const [proccessing, setProccessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const {\n    data,\n    loading,\n    error: fetchError\n  } = useFetch(products); //====================================================================\n\n  useEffect(() => {\n    if (loading || fetchError) return;\n    const {\n      price\n    } = data[0]; // fetch stripe client secret using to proccess payment\n\n    window.fetch(\"/api/payments/stripe\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          price,\n          amount: 3\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, [data, loading, fetchError]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setProccessing(true);\n    const paymentMethod = await stripe.createPaymentMethod({\n      type: \"card\",\n      //@ts-ignore\n      card: elements.getElement(CardElement)\n    });\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        type: \"card\",\n        card: elements.getElement(CardElement)\n      }\n    }); // TODO: These can be use globally\n\n    if (payload.error) {\n      setError(`payment failed ${payload.error.message}`);\n      setProccessing(false);\n    } else {\n      setError(null);\n      setProccessing(false);\n      setSuccess(true);\n      console.log(payload);\n    } //===================================================================\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"stripe-checkout-form\",\n    onSubmit: handleSubmit,\n    style: {\n      color: \"white\"\n    },\n    children: [success && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Payment success!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Payment failed! \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe || proccessing,\n      children: \"Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CheckoutForm, \"Zw+4T8+YDXXMRXyrWLActdNWHHA=\", false, function () {\n  return [useStripe, useElements, useFetch];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/home/nick/Documents/projects/golf-store/client/src/checkout/stripe/CheckoutForm.js"],"names":["React","useEffect","useState","CardElement","useElements","useStripe","useFetch","cardStyle","style","base","fontSize","color","invalid","products","CheckoutForm","stripe","elements","clientSecret","setClientSecret","proccessing","setProccessing","error","setError","success","setSuccess","data","loading","fetchError","price","window","fetch","method","headers","body","JSON","stringify","items","amount","then","res","json","handleSubmit","e","preventDefault","paymentMethod","createPaymentMethod","type","card","getElement","payload","confirmCardPayment","payment_method","message","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { CardElement, useElements, useStripe } from \"@stripe/react-stripe-js\";\nimport { useFetch } from \"../../hooks/useFetch\";\n\nconst cardStyle = {\n  style: {\n    base: {\n      fontSize: \"16px\",\n      color: \"#424770\",\n      \"::placeholder\": {\n        color: \"#aab7c4\",\n      },\n    },\n    invalid: {\n      color: \"#9e2146\",\n    },\n  },\n};\n\nconst products = \"https://golf-company.herokuapp.com/api/golfs/\";\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  // TODO: These can be use globally\n  const [proccessing, setProccessing] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const { data, loading, error: fetchError } = useFetch(products);\n  //====================================================================\n\n  useEffect(() => {\n    if (loading || fetchError) return;\n    const { price } = data[0];\n    // fetch stripe client secret using to proccess payment\n    window\n      .fetch(\"/api/payments/stripe\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ items: [{ price, amount: 3 }] }),\n      })\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      });\n  }, [data, loading, fetchError]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setProccessing(true);\n\n    const paymentMethod = await stripe.createPaymentMethod({\n      type: \"card\",\n      //@ts-ignore\n      card: elements.getElement(CardElement),\n    });\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        type: \"card\",\n        card: elements.getElement(CardElement),\n      },\n    });\n\n    // TODO: These can be use globally\n    if (payload.error) {\n      setError(`payment failed ${payload.error.message}`);\n      setProccessing(false);\n    } else {\n      setError(null);\n      setProccessing(false);\n      setSuccess(true);\n      console.log(payload);\n    }\n    //===================================================================\n  };\n\n  return (\n    <form\n      id={\"stripe-checkout-form\"}\n      onSubmit={handleSubmit}\n      style={{ color: \"white\" }}\n    >\n      {success && <div>Payment success!</div>}\n      {error && <div>Payment failed! {error}</div>}\n      <CardElement id=\"card-element\" options={cardStyle}></CardElement>\n      <button type=\"submit\" disabled={!stripe || proccessing}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}